/* tslint:disable */
/* eslint-disable */
/**
 * Data Analyst API
 * API for the Data Analyst project.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Represents a user's profile information, typically received from the client.
 * @export
 * @interface User
 */
export interface User {
    /**
     * Gets or sets the user's unique Google identifier.
     * This is primarily validated from the token claims on the backend and serves as the Primary Key.
     * @type {string}
     * @memberof User
     */
    googleId: string;
    /**
     * Gets or sets the user's email address.
     * This is primarily validated from the token claims on the backend.
     * @type {string}
     * @memberof User
     */
    email: string;
    /**
     * Gets or sets the user's display name.
     * This is typically provided in the request body.
     * @type {string}
     * @memberof User
     */
    name: string;
    /**
     * Gets or sets the URL of the user's profile picture. Optional.
     * @type {string}
     * @memberof User
     */
    profilePictureUrl?: string | null;
    /**
     * Gets or sets the UTC date and time when this user record was created in the database.
     * @type {Date}
     * @memberof User
     */
    createdAtUtc?: Date;
    /**
     * Gets or sets the UTC date and time when this user record was updated in the database
     * @type {Date}
     * @memberof User
     */
    lastLoginAtUtc?: Date;
    /**
     * Gets or sets the users database conenction string
     * @type {string}
     * @memberof User
     */
    userDatabaseConnectionString?: string | null;
}

/**
 * Check if a given object implements the User interface.
 */
export function instanceOfUser(value: object): value is User {
    if (!('googleId' in value) || value['googleId'] === undefined) return false;
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    return true;
}

export function UserFromJSON(json: any): User {
    return UserFromJSONTyped(json, false);
}

export function UserFromJSONTyped(json: any, ignoreDiscriminator: boolean): User {
    if (json == null) {
        return json;
    }
    return {
        
        'googleId': json['googleId'],
        'email': json['email'],
        'name': json['name'],
        'profilePictureUrl': json['profilePictureUrl'] == null ? undefined : json['profilePictureUrl'],
        'createdAtUtc': json['createdAtUtc'] == null ? undefined : (new Date(json['createdAtUtc'])),
        'lastLoginAtUtc': json['lastLoginAtUtc'] == null ? undefined : (new Date(json['lastLoginAtUtc'])),
        'userDatabaseConnectionString': json['userDatabaseConnectionString'] == null ? undefined : json['userDatabaseConnectionString'],
    };
}

export function UserToJSON(value?: User | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'googleId': value['googleId'],
        'email': value['email'],
        'name': value['name'],
        'profilePictureUrl': value['profilePictureUrl'],
        'createdAtUtc': value['createdAtUtc'] == null ? undefined : ((value['createdAtUtc']).toISOString()),
        'lastLoginAtUtc': value['lastLoginAtUtc'] == null ? undefined : ((value['lastLoginAtUtc']).toISOString()),
        'userDatabaseConnectionString': value['userDatabaseConnectionString'],
    };
}

