/* tslint:disable */
/* eslint-disable */
/**
 * Data Analyst API
 * API for the Data Analyst project.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DataSession,
  ProblemDetails,
} from '../models/index';
import {
    DataSessionFromJSON,
    DataSessionToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models/index';

export interface ApiDataSessionDeleteRequest {
    dataSessionId?: string;
}

export interface ApiDataSessionGetByIdGetRequest {
    dataSessionId?: string;
}

export interface ApiDataSessionPostRequest {
    dataSession?: Omit<DataSession, 'schemaName'>;
}

export interface ApiDataSessionPutRequest {
    dataSessionId?: string;
    dataSessionName?: string;
}

/**
 * 
 */
export class DataSessionApi extends runtime.BaseAPI {

    /**
     */
    async apiDataSessionDeleteRaw(requestParameters: ApiDataSessionDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['dataSessionId'] != null) {
            queryParameters['dataSessionId'] = requestParameters['dataSessionId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/DataSession`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiDataSessionDelete(requestParameters: ApiDataSessionDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiDataSessionDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiDataSessionGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DataSession>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/DataSession`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DataSessionFromJSON));
    }

    /**
     */
    async apiDataSessionGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DataSession>> {
        const response = await this.apiDataSessionGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiDataSessionGetByIdGetRaw(requestParameters: ApiDataSessionGetByIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DataSession>> {
        const queryParameters: any = {};

        if (requestParameters['dataSessionId'] != null) {
            queryParameters['dataSessionId'] = requestParameters['dataSessionId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/DataSession/GetById`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DataSessionFromJSON(jsonValue));
    }

    /**
     */
    async apiDataSessionGetByIdGet(requestParameters: ApiDataSessionGetByIdGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DataSession> {
        const response = await this.apiDataSessionGetByIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiDataSessionPostRaw(requestParameters: ApiDataSessionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/DataSession`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DataSessionToJSON(requestParameters['dataSession']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async apiDataSessionPost(requestParameters: ApiDataSessionPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.apiDataSessionPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiDataSessionPutRaw(requestParameters: ApiDataSessionPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['dataSessionId'] != null) {
            queryParameters['dataSessionId'] = requestParameters['dataSessionId'];
        }

        if (requestParameters['dataSessionName'] != null) {
            queryParameters['dataSessionName'] = requestParameters['dataSessionName'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/DataSession`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiDataSessionPut(requestParameters: ApiDataSessionPutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiDataSessionPutRaw(requestParameters, initOverrides);
    }

}
