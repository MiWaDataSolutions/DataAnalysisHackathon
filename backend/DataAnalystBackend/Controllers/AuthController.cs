using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.Google;
using Microsoft.AspNetCore.Authentication.Cookies; // Added for CookieAuthenticationDefaults
using Microsoft.AspNetCore.Authorization; // Added for [Authorize] attribute
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using System.Security.Claims;

namespace DataAnalystBackend.Controllers
{
    [Route("auth")] // Base route for auth actions
    [ApiController]
    public class AuthController : ControllerBase
    {
        private readonly ILogger<AuthController> _logger;

        public AuthController(ILogger<AuthController> logger) // Added constructor for logger injection
        {
            _logger = logger;
        }

        [HttpGet("google-login")] // Route should match LoginPath from CookieAuthenticationOptions
        public IActionResult GoogleLogin(string? returnUrl = null) // Add returnUrl parameter
        {
            // If returnUrl is null or empty, default to root.
            // Ensure the returnUrl is local to prevent open redirect attacks.
            // The ReturnUrl parameter is typically generated by the ASP.NET Core authentication
            // middleware when an unauthenticated user tries to access a protected resource.
            string redirectUri = !string.IsNullOrEmpty(returnUrl) ? returnUrl : "/";

            _logger.LogInformation("GoogleLogin called. Resolved RedirectUri: {RedirectUri}", redirectUri);

            var properties = new AuthenticationProperties { RedirectUri = redirectUri };

            // Challenge the GoogleDefaults.AuthenticationScheme.
            // This will trigger a redirect to Google's login page.
            // After Google auth, and after our /signin-google callback (handled by Google middleware)
            // processes and sets the local cookie (via OnCreatingTicket),
            // the user will be redirected to the 'redirectUri' specified in 'properties'.
            return new ChallengeResult(GoogleDefaults.AuthenticationScheme, properties);
        }

        [HttpPost("logout")]
        [Authorize] // Ensures only authenticated users can attempt to logout
        public async Task<IActionResult> Logout()
        {
            await HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
            _logger.LogInformation("User {UserId} logged out successfully at {Time}.",
                User.FindFirstValue(ClaimTypes.NameIdentifier) ?? "unknown", // Example of logging user ID
                DateTime.UtcNow);
            return Ok(new { message = "Logged out successfully" });
        }
    }
}
